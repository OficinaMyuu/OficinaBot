package ofc.bot.commands.relationships.marriages;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.MessageEmbed;
import ofc.bot.commands.relationships.MarryCommand;
import ofc.bot.domain.entity.enums.ExclusionType;
import ofc.bot.domain.sqlite.repository.MarriageRepository;
import ofc.bot.domain.sqlite.repository.UserExclusionRepository;
import ofc.bot.handlers.interactions.commands.contexts.impl.SlashCommandContext;
import ofc.bot.handlers.interactions.commands.responses.states.InteractionResult;
import ofc.bot.handlers.interactions.commands.slash.abstractions.SlashSubcommand;
import ofc.bot.util.Bot;
import ofc.bot.util.content.annotations.commands.DiscordCommand;

import java.time.Instant;
import java.util.List;

@DiscordCommand(name = "marriage help", description = "Mostra informa√ß√µes gerais sobre o recurso de casamento.")
public class MarriageHelpCommand extends SlashSubcommand {
    private final UserExclusionRepository exclRepo;
    private final MarriageRepository marrRepo;

    public MarriageHelpCommand(UserExclusionRepository exclRepo, MarriageRepository marrRepo) {
        this.exclRepo = exclRepo;
        this.marrRepo = marrRepo;
    }

    @Override
    public InteractionResult onSlashCommand(SlashCommandContext ctx) {
        long userId = ctx.getUser().getIdLong();
        MessageEmbed embed = embed(userId);

        return ctx.create(true)
                .setEmbeds(embed)
                .send();
    }

    private MessageEmbed embed(long userId) {
        EmbedBuilder builder = new EmbedBuilder();
        String description = getDesc(userId);

        return builder
                .setTitle("Casamentos üíç")
                .setDescription(description)
                .appendDescription("\nPara mais d√∫vidas: <#677986496065699881>.")
                .setTimestamp(Instant.now())
                .setColor(Bot.Colors.DEFAULT)
                .build();
    }

    private String getDesc(long userId) {
        int affectedMarriageCount = findAffectedCount(userId);
        String initialCost = Bot.fmtNum(MarryCommand.INITIAL_MARRIAGE_COST);
        String userDailyCost = Bot.fmtNum((long) MarryCommand.DAILY_COST * affectedMarriageCount);

        return String.format("""
                N√£o √© de hoje que os casamentos v√™m se tornando um dos recursos mais \
                utilizados do bot. Para que voc√™ entenda de maneira clara \
                esse m√≥dulo em um todo, este guia foi criado.
                
                > Custo inicial: `$%s`.
                > Custo di√°rio: `$%s` (para voc√™).
                
                ## üîí Limita√ß√µes
                Limite membros Geral: `%d casamentos`.
                Limite membros Salada: `%d casamentos`.
                Membros em Manage Server: `sem limite`.
                
                Se casar com membros em `Manage Server` n√£o cobrar√° o valor inicial \
                e nem a taxa di√°ria por casamento, por√©m contar√£o no \
                seu limite de casamentos.
                
                ## üí∏ Taxa Di√°ria
                A taxa di√°ria funciona de maneira [__at√¥mica__](<https://en.wikipedia.org/wiki/ACID>), \
                isso significa que, ou todos os membros s√£o cobrados/divorciados de acordo, ou, em caso de erro, \
                todos falham, n√£o existe meio termo.
                Se um usu√°rio n√£o tem dinheiro para se manter casado com todos que ele se comprometeu, ent√£o \
                √†s <t:946692000:t> ele ser√° divorciado em ordem por cria√ß√£o (do casamento mais recente at√© o mais antigo) \
                at√© que ele tenha o saldo suficiente (ou perca todos os casamentos).
                
                ### ü§î E qual a l√≥gica disso?
                Vamos usar este exemplo na respectiva ordem:
                
                - Pedro se casou com Maria.
                - Pedro se casou com Arthur.
                - Pedro se casou com Carlos.
                - Pedro se casou com Rita.
                
                Imagine que Maria n√£o tem dinheiro para sustentar seu casamento com Pedro; \
                Pedro tem dinheiro para manter apenas 3 casamentos.
                Nesse caso, Maria poderia ser divorciada de Pedro (ficando ele com 3 casamentos) \
                e... √≥timo, Pedro agora pode sustentar seus 3 casamentos. Mas bem, isso n√£o soa justo, \
                j√° que depender√≠amos da ordem que o bot verificar primeiro, portanto, o seguinte ser√° feito:
                
                Maria ser√° divorciada de Pedro por n√£o ter saldo suficiente.
                Pedro tamb√©m ser√° divorciado de Rita (seu √∫ltimo casamento), j√° que ele s√≥ tinha dinheiro para manter 3.
                
                *Nesse cen√°rio, se Maria fosse tamb√©m, o √∫ltimo casamento de Pedro, apenas ela seria divorciada \
                e Pedro seguiria com 3 casamentos.*
                
                Sim, nesse cen√°rio, Pedro perder√° 2 casamentos, mesmo que ele conseguisse manter um deles. \
                Essa decis√£o √© tomada para evitar ambiguidades e comportamentos inesperados.
                """,
                initialCost,
                userDailyCost,
                MarryCommand.MAX_GENERAL_MARRIAGES,
                MarryCommand.MAX_PRIVILEGED_MARRIAGES
        );
    }

    /**
     * This method is practically the same as {@link ofc.bot.domain.sqlite.repository.MarriageRepository#countByUserId(long) MarriageRepository.countByUserId(long)} except that
     * it excludes users that are not affected by the daily relationship taxes.
     * <p>
     * The value returned by this method can be used to check how much the
     * given user will be charged daily by doing {@code findAffectedCount(long) * Marry.DAILY_COST}.
     *
     * @param userId The id of the user to run the count on.
     * @return The amount of user's relationships affected by the daily tax.
     */
    public int findAffectedCount(long userId) {
        List<Long> exclIds =  exclRepo.findUserIdsByType(ExclusionType.MARRIAGE_FEE);
        return marrRepo.countWithExclusions(userId, exclIds);
    }
}